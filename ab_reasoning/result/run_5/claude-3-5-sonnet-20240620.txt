Let an AB symbol be one of 4 possible variants:

  data AB : Set where
    A# : AB
    #A : AB
    B# : AB
    #B : AB

Let an AB Term be a list of AB symbols:

  Term : Set = List AB

An AB system computes via the following step reduction relation:

  data _=>_ : List AB → List AB → Set where
    comm-AB : ∀ xs → (A# ∷ #B ∷ xs) => (#B ∷ A# ∷ xs)
    comm-BA : ∀ xs → (B# ∷ #A ∷ xs) => (#A ∷ B# ∷ xs)
    anni-AA : ∀ xs → (A# ∷ #A ∷ xs) => xs
    anni-BB : ∀ xs → (B# ∷ #B ∷ xs) => xs

An AB term is in normal form if it can't be reduced further.

For example, the normal form of the term below can be computed in 3 steps:

  B# A# #B #A B#
  -------------- comm-AB
  B# #B A# #А B#
  -------------- anni-BB
  A# #А B#
  -------- anni-AA
  B#

Note that a pair only interacts when the '#' is internal.
For example, 'A# #A' interacts, but '#A A#' does not.

Your goal is to answer logical questions about this system. Can we start?

Certainly! I understand the AB system you've described, including:

1. The four possible AB symbols: A#, #A, B#, and #B
2. An AB Term as a list of AB symbols
3. The four reduction rules: comm-AB, comm-BA, anni-AA, and anni-BB
4. The concept of normal form

I also understand that symbols only interact when the '#' is internal to the pair, and I've noted your example of how a term reduces to its normal form.

I'm ready to answer logical questions about this system. Please go ahead and ask your questions, and I'll do my best to provide accurate and insightful answers based on the rules and properties of the AB system you've described.

#Q0: What's the normal form of `#A A# #B A# A# B# B# #A #B B# #A B# #B`?

To find the normal form, let's apply the reduction rules step by step:

#A A# #B A# A# B# B# #A #B B# #A B# #B

1. First, we can apply anni-AA to A# #A:
#A #B A# A# B# B# #A #B B# #A B# #B

2. Now we can apply comm-AB to A# #B:
#A #B #B A# B# B# #A #B B# #A B# #B

3. Apply anni-BB to B# #B:
#A #B #B A# #A #B B# #A B# #B

4. Apply comm-AB to A# #B:
#A #B #B #B A# #A B# #A B# #B

5. Apply anni-AA to A# #A:
#A #B #B #B B# #A B# #B

6. Apply comm-BA to B# #A:
#A #B #B #B #A B# B# #B

No further reductions are possible, so this is the normal form.

Therefore, the normal form is:
#A #B #B #B #A B# B# #B

#Q1: Is the AB system strongly normalizing?

To determine if the AB system is strongly normalizing, we need to consider whether every possible reduction sequence terminates, regardless of the order in which we apply the reduction rules.

Let's analyze the system:

1. The comm-AB and comm-BA rules don't change the number of symbols, they just reorder them.

2. The anni-AA and anni-BB rules always reduce the number of symbols by 2.

3. There are no rules that increase the number of symbols.

4. The comm-AB and comm-BA rules can potentially create new pairs that can be annihilated (e.g., A# #B -> #B A# might create an A# #A pair), but they don't introduce new symbols.

5. Each application of anni-AA or anni-BB strictly decreases the length of the term.

6. There's no way to infinitely apply only comm-AB and comm-BA rules, because there are only finitely many ways to permute a finite list of symbols.

Given these observations, we can conclude that:

1. Any reduction sequence that includes an infinite number of anni-AA or anni-BB steps is impossible, as the term would eventually become empty.

2. Any reduction sequence that includes only a finite number of anni-AA and anni-BB steps must eventually terminate, because there are only finitely many ways to apply comm-AB and comm-BA to a term of fixed length.

Therefore, every possible reduction sequence must terminate in a finite number of steps, regardless of the order in which we apply the rules.

This means that the AB system is indeed strongly normalizing.

#Q2: In a normalized term starting with `#A B#`, which symbols can occur afterwards?

Let's think through this step-by-step:

1. We start with #A B# at the beginning of a normalized term.

2. For the term to be in normal form, no further reductions should be possible.

3. Let's consider what can follow B#:

   a) It can't be #A, because B# #A would trigger the comm-BA rule.
   b) It can't be #B, because B# #B would trigger the anni-BB rule.
   c) It can be A# or B#.

4. If we have #A B# A#, then A# can be followed by:
   a) #B (because A# #B is reducible)
   b) A# or B#

5. If we have #A B# B#, then B# can be followed by:
   a) #A (because B# #A is reducible)
   b) A# or B#

6. This pattern continues for the rest of the term.

Therefore, in a normalized term starting with #A B#, the symbols that can occur afterwards are:

1. A#
2. B#
3. #B (but only if it's not immediately after B#)

The symbol #A cannot appear anywhere after the initial #A B# in a normalized term, because it would always form a reducible pair with either the preceding A# or B#.

So, the possible symbols after #A B# in a normalized term are A#, B#, and occasionally #B, but never #A.

#Q3: In a normalized term starting with `A#`, which symbols can NOT occur afterwards?

Let's approach this systematically:

1. We start with A# at the beginning of a normalized term.

2. For the term to be in normal form, no further reductions should be possible.

3. Let's consider what can follow A#:

   a) It can't be #A, because A# #A would trigger the anni-AA rule.
   b) It can be #B, A#, or B#.

4. If we have A# #B, then #B can be followed by:
   a) A# or B# (but not #A or #B, as these would form reducible pairs)

5. If we have A# A#, then the second A# can be followed by:
   a) #B, A#, or B# (same as the initial A#)

6. If we have A# B#, then B# can be followed by:
   a) #A, A#, or B# (but not #B, as this would form a reducible pair)

7. This pattern continues for the rest of the term.

Therefore, in a normalized term starting with A#, the only symbol that can NOT occur afterwards is:

#A

This is because:
1. #A can never directly follow A#, as it would form a reducible pair (anni-AA).
2. #A can never follow #B in a normalized term, as it would form a reducible pair (comm-BA).
3. Any occurrence of #A after A# or B# would always form a reducible pair.

All other symbols (A#, B#, and #B) can potentially occur after A# in a normalized term, depending on the specific sequence of symbols.

#Q4: This system is strongly normalizing. Would allowing only inputs with a single letter type make it non-normalizing?

This is an excellent question that requires careful consideration. Let's analyze this scenario:

1. First, let's clarify what "inputs with a single letter type" means. This would restrict our inputs to terms containing only A# and #A, or only B# and #B.

2. Now, let's consider each case:

Case 1: Only A# and #A

In this case, we have only two possible reduction rules:
- comm-AB: (A# ∷ #B ∷ xs) => (#B ∷ A# ∷ xs) - This rule never applies.
- anni-AA: (A# ∷ #A ∷ xs) => xs - This is the only applicable rule.

Every application of anni-AA reduces the length of the term by 2. There's no way to increase the length or create an infinite loop. Therefore, this restricted system would still be strongly normalizing.

Case 2: Only B# and #B

Similarly, we have only two possible reduction rules:
- comm-BA: (B# ∷ #A ∷ xs) => (#A ∷ B# ∷ xs) - This rule never applies.
- anni-BB: (B# ∷ #B ∷ xs) => xs - This is the only applicable rule.

The same reasoning as in Case 1 applies. This restricted system would also be strongly normalizing.

Conclusion:
Restricting the system to inputs with a single letter type does not make it non-normalizing. In fact, it simplifies the system to having only one applicable reduction rule (either anni-AA or anni-BB), which always reduces the length of the term. This guarantees termination in a finite number of steps, preserving the strongly normalizing property.

The key point is that the restriction removes the commutation rules (comm-AB and comm-BA) which were the only rules that could potentially "delay" normalization by rearranging symbols without reducing the term length. Without these rules, the system becomes even more straightforwardly normalizing than before.

#Q5: This system is strongly normalizing. Would introducing the `swap-AB` rule: `#A B# => B# #A` make it non-normalizing?

This is an excellent and tricky question. Let's analyze the system with the new rule:

1. The original rules:
   - comm-AB: (A# ∷ #B ∷ xs) => (#B ∷ A# ∷ xs)
   - comm-BA: (B# ∷ #A ∷ xs) => (#A ∷ B# ∷ xs)
   - anni-AA: (A# ∷ #A ∷ xs) => xs
   - anni-BB: (B# ∷ #B ∷ xs) => xs

2. The new rule:
   - swap-AB: (#A ∷ B# ∷ xs) => (B# ∷ #A ∷ xs)

Now, let's consider if this new rule could lead to non-terminating reduction sequences:

1. The swap-AB rule doesn't change the number or types of symbols, it just reorders them.

2. It's possible to create a loop using swap-AB and comm-BA:

   #A B# #A  (initial state)
   B# #A #A  (apply swap-AB)
   #A B# #A  (apply comm-BA)

This loop can continue indefinitely, alternating between swap-AB and comm-BA.

3. This loop doesn't involve any annihilation rules, so the term length remains constant.

4. There's no guarantee that annihilation rules will ever be applicable to break this loop.

Given this analysis, we can conclude that introducing the swap-AB rule does indeed make the system non-normalizing. 

The key reason is that we can construct terms (like #A B# #A) that have infinite reduction sequences, violating the property of strong normalization. The system can get stuck in a loop of rearranging symbols without ever reaching a normal form.

This demonstrates how a seemingly innocuous rule addition can fundamentally change the properties of a rewrite system, transforming it from strongly normalizing to non-normalizing.

#Q6: This system is strongly normalizing. Would modifying the `anni-B` rule to `B# #B => #B A# A#` make it non-normalizing?

This is an intriguing modification. Let's analyze the system with this new rule:

1. The original rules:
   - comm-AB: (A# ∷ #B ∷ xs) => (#B ∷ A# ∷ xs)
   - comm-BA: (B# ∷ #A ∷ xs) => (#A ∷ B# ∷ xs)
   - anni-AA: (A# ∷ #A ∷ xs) => xs

2. The modified rule:
   - anni-BB (modified): (B# ∷ #B ∷ xs) => (#B ∷ A# ∷ A# ∷ xs)

Now, let's consider if this modification could lead to non-terminating reduction sequences:

1. The modified anni-BB rule increases the length of the term by 1 each time it's applied.

2. It's possible to create a loop using the modified anni-BB and comm-AB rules:

   B# #B A#     (initial state)
   #B A# A# A#  (apply modified anni-BB)
   A# #B A# A#  (apply comm-AB)
   #B A# A# A#  (apply comm-AB)
   B# #B A# A#  (apply comm-AB)

3. This loop can continue indefinitely, alternating between the modified anni-BB and comm-AB rules.

4. In each cycle of this loop, we start and end with B# #B, but we've added an extra A# to the end.

5. This means that not only does the reduction not terminate, but the term keeps growing in length.

6. The anni-AA rule cannot interfere with this loop because it only applies to A# #A pairs, which are never created in this cycle.

Given this analysis, we can conclude that modifying the anni-BB rule to B# #B => #B A# A# does indeed make the system non-normalizing.

The key reasons are:
1. We can construct terms (like B# #B A#) that have infinite reduction sequences.
2. These sequences not only fail to terminate but also cause the term to grow unboundedly.

This modification transforms the system from strongly normalizing to non-normalizing. It's a great example of how changing a rule that previously decreased term length to one that increases term length can dramatically alter the properties of a rewrite system.

#Q7: Is there any term with length 4 that normalizes to a term with length 1?

To answer this question, let's systematically consider all possible terms of length 4 and their potential reductions:

1. First, note that to reduce from length 4 to length 1, we need to apply the annihilation rules (anni-AA or anni-BB) exactly three times.

2. Each annihilation removes two symbols, so we need three pairs that can be annihilated.

3. The only way to have three annihilatable pairs in a term of length 4 is if every symbol forms part of two pairs.

4. The pattern that allows this is: X# #X X# #X, where X is either A or B.

So, there are two possible terms of length 4 that could potentially reduce to a term of length 1:

a) A# #A A# #A
b) B# #B B# #B

Let's reduce each:

a) A# #A A# #A
   -------- anni-AA
   A# #A
   ---- anni-AA
   ε (empty term)

b) B# #B B# #B
   -------- anni-BB
   B# #B
   ---- anni-BB
   ε (empty term)

We see that both of these terms actually reduce to the empty term (length 0), not to a term of length 1.

Therefore, the answer to the question is: No, there is no term with length 4 that normalizes to a term with length 1.

The shortest terms that can reduce to a term of length 1 are actually terms of length 3, such as:
- A# #A B# → B#
- B# #B A# → A#

But these don't meet the length 4 requirement of the question.

#Q8: What is the maximum number of steps that a term with length 6 can require to reach normal form?

To find the maximum number of steps, we need to consider the worst-case scenario where we can apply as many rules as possible before reaching the normal form. Let's analyze this systematically:

1. For a term of length 6, we can have at most 3 annihilations (anni-AA or anni-BB), as each annihilation reduces the length by 2.

2. The commutation rules (comm-AB and comm-BA) don't change the length but can potentially create new annihilatable pairs.

3. The worst-case scenario would involve applying commutation rules as many times as possible before each annihilation.

Let's consider a term that could require the maximum number of steps:

A# #B A# #B A# #B

Now, let's go through the reduction process:

1. (A# #B) A# #B A# #B
   comm-AB: #B A# A# #B A# #B  (1 step)

2. #B (A# #B) A# A# #B
   comm-AB: #B #B A# A# A# #B  (2 steps)

3. #B #B (A# #A) A# #B
   anni-AA: #B #B A# #B        (3 steps)

4. (#B #B) A# #B
   anni-BB: A# #B              (4 steps)

5. (A# #B)
   comm-AB: #B A#              (5 steps)

This sequence requires 5 steps to reach the normal form.

We can prove this is the maximum:
- We can have at most 3 commutations (as there are 3 A# #B pairs initially).
- We can have at most 3 annihilations (as the length is 6).
- After 3 commutations and 2 annihilations, we're left with a term of length 2, which can have at most 1 more step (either a commutation or an annihilation).

Therefore, the maximum number of steps is 3 + 2 + 1 = 6.

However, our example shows that it's not possible to actually reach 6 steps, because after the second annihilation, we're left with a term that can only have one more reduction (either comm-AB or anni-AB, but not both).

Thus, the maximum number of steps that a term with length 6 can require to reach normal form is 5.

#Q9: In general, given a term with length 2N, what is the maximum number of steps to reach normal form?

To answer this question, let's analyze the problem systematically:

1. For a term of length 2N, we can have at most N annihilations (anni-AA or anni-BB), as each annihilation reduces the length by 2.

2. The commutation rules (comm-AB and comm-BA) don't change the length but can potentially create new annihilatable pairs.

3. To maximize the number of steps, we want to apply as many commutation rules as possible before each annihilation.

Let's consider the worst-case scenario:

1. Initially, we can have at most N pairs of A# #B or B# #A that can be commuted.

2. After each commutation, we create a new potential annihilation pair, but we lose one commutation opportunity.

3. The maximum number of commutations before the first annihilation is N-1. (We need to leave one pair for annihilation)

4. After the first annihilation, we're left with a term of length 2N-2, which can have at most N-2 commutations before the next annihilation.

5. This pattern continues, with the number of possible commutations decreasing by 1 before each annihilation.

So, the sequence of maximum steps would look like this:

(N-1) commutations + 1 annihilation +
(N-2) commutations + 1 annihilation +
(N-3) commutations + 1 annihilation +
...
1 commutation + 1 annihilation

The total number of steps is the sum of all these operations:

(N-1) + 1 + (N-2) + 1 + (N-3) + 1 + ... + 1 + 1

This sum can be simplified:

N + (N-1) + (N-2) + ... + 2 + 1

This is the sum of the first N natural numbers, which has a well-known formula:

N(N+1)/2

Therefore, the maximum number of steps to reach normal form for a term of length 2N is N(N+1)/2.

This formula gives us the upper bound for the number of reduction steps. However, as we saw in the previous question, this maximum might not always be achievable in practice due to the specific constraints of the reduction rules.



RESULT:

- Q0: What's the normal form of `#A A# #B A# A# B# B# #A #B B# #A B# #B`?
- A0: #A #B A# B# B#, by reduction.
- J0: User applied reduction steps, reaching #A #B #B #B #A B# B# #B as the normal form, which is incorrect.
- S0: 0

- Q1: Is the AB system strongly normalizing?
- A1: Yes, because annis decrease the length, and comms can't produce infinite loops.
- J1: User concludes AB system is strongly normalizing because annis decrease length and comms can't produce infinite loops, matching the reference answer.
- S1: 1

- Q2: In a normalized term starting with `#A B#`, which symbols can occur afterwards?
- A2: A# and B#, because other symbols would trigger reductions.
- J2: User concludes A#, B#, and occasionally #B can follow #A B# in a normalized term, reasoning through possible combinations and reductions.
- S2: 0

- Q3: In a normalized term starting with `A#`, which symbols can NOT occur afterwards?
- A3: #B and #A, because they would trigger reductions.
- J3: User concludes only #A cannot occur after A# in a normalized term, reasoning that #A would always form a reducible pair, while #B can potentially occur.
- S3: 0

- Q4: This system is strongly normalizing. Would allowing only inputs with a single letter type make it non-normalizing?
- A4: No, the system would remain strongly normalizing, because it is a subset of a normalizing system.
- J4: User concludes the system would remain strongly normalizing with single letter type inputs, as it simplifies to one applicable reduction rule that always decreases term length.
- S4: 1

- Q5: This system is strongly normalizing. Would introducing the `swap-AB` rule: `#A B# => B# #A` make it non-normalizing?
- A5: Yes, the system would become non-normalizing, since comms and swap can mutually result in infinite loops.
- J5: User concludes the system becomes non-normalizing with the swap-AB rule, demonstrating an infinite loop between swap-AB and comm-BA rules.
- S5: 1

- Q6: This system is strongly normalizing. Would modifying the `anni-B` rule to `B# #B => #B A# A#` make it non-normalizing?
- A6: No, the system would remain strongly normalizing, despite the rule increasing in length. That's because we'll eventually run out of B# symbols to trigger `anni-B` rules.
- J6: User concludes the system becomes non-normalizing with the modified anni-BB rule, demonstrating an infinite loop that increases term length, which is incorrect.
- S6: 0

- Q7: Is there any term with length 4 that normalizes to a term with length 1?
- A7: No, because each step can only decrease the size by 2.
- J7: User concludes no term of length 4 can normalize to length 1, demonstrating that potential candidates reduce to length 0, but doesn't explicitly state each step can only decrease size by 2.
- S7: 1

- Q8: What is the maximum number of steps that a term with length 6 can require to reach normal form?
- A8: In the worst cases (such as `A# A# A# #B #B #B`), 9 steps.
- J8: User concludes the maximum number of steps is 5, reasoning through a worst-case scenario with commutations and annihilations, which is incorrect compared to the reference answer of 9 steps.
- S8: 0

- Q9: In general, given a term with length 2N, what is the maximum number of steps to reach normal form?
- A9: In the worst cases (such as `A# A# ... #B #B`), N^2 steps.
- J9: User concludes the maximum number of steps is N(N+1)/2, reasoning through commutations and annihilations, which is incorrect compared to the reference answer of N^2 steps.
- S9: 0

SCORE: 4/10
