Let an AB symbol be one of 4 possible variants:

  data AB : Set where
    A# : AB
    #A : AB
    B# : AB
    #B : AB

Let an AB Term be a list of AB symbols:

  Term : Set = List AB

An AB system computes via the following step reduction relation:

  data _=>_ : List AB → List AB → Set where
    comm-AB : ∀ xs → (A# ∷ #B ∷ xs) => (#B ∷ A# ∷ xs)
    comm-BA : ∀ xs → (B# ∷ #A ∷ xs) => (#A ∷ B# ∷ xs)
    anni-AA : ∀ xs → (A# ∷ #A ∷ xs) => xs
    anni-BB : ∀ xs → (B# ∷ #B ∷ xs) => xs

An AB term is in normal form if it can't be reduced further.

For example, the normal form of the term below can be computed in 3 steps:

  B# A# #B #A B#
  -------------- comm-AB
  B# #B A# #А B#
  -------------- anni-BB
  A# #А B#
  -------- anni-AA
  B#

Note that a pair only interacts when the '#' is internal.
For example, 'A# #A' interacts, but '#A A#' does not.

Your goal is to answer logical questions about this system. Can we start?

Absolutely, I'm ready to help you explore and answer questions about the AB system you've described. Feel free to ask your first question!

#Q0: What's the normal form of `#A A# #B A# A# B# B# #A #B B# #A B# #B`?

Let's compute the normal form of the term `#A A# #B A# A# B# B# #A #B B# #A B# #B` step by step using the AB system's reduction rules.

### Initial Term:
```
#A A# #B A# A# B# B# #A #B B# #A B# #B
```

### Reduction Steps:

1. **Step 1: Apply `comm-AB` on `A# #B`**
   ```
   #A #B A# A# B# B# #A #B B# #A B# #B
   ```

2. **Step 2: Apply `comm-BA` on `B# #A`**
   ```
   #A #B A# A# #A B# #B B# #A B# #B
   ```

3. **Step 3: Apply `comm-BA` on `B# #A`**
   ```
   #A #B A# #A B# #B B# #A B# #B
   ```

4. **Step 4: Apply `anni-AA` on `A# #A`**
   ```
   #A #B B# #B B# #A B# #B
   ```

5. **Step 5: Apply `anni-BB` on `B# #B`**
   ```
   #A #B B#
   ```

### Normal Form:
```
#A #B B#
```

This is the simplest form of the term where no further reductions can be applied.

**Answer:**  
The normal form is `#A #B B#`.

#Q1: Is the AB system strongly normalizing?

Yes, the **AB system** is **strongly normalizing**. Here's a detailed explanation to substantiate this conclusion.

### Understanding Strong Normalization

A system is **strongly normalizing** if **every possible reduction sequence terminates** in a finite number of steps, reaching a normal form where no further reductions are possible.

### Analyzing the AB System

Let's recap the components and rules of the AB system:

1. **Symbols:**
   - `A#`
   - `#A`
   - `B#`
   - `#B`

2. **Reduction Rules:**
   - **Commutation Rules:**
     - `comm-AB`: `A# #B → #B A#`
     - `comm-BA`: `B# #A → #A B#`
   - **Annihilation Rules:**
     - `anni-AA`: `A# #A → ε` (removes both symbols)
     - `anni-BB`: `B# #B → ε` (removes both symbols)

### Why the AB System is Strongly Normalizing

1. **Finite Reduction Paths:**
   - **Commutation Rules Only Rearrange:** The `comm-AB` and `comm-BA` rules merely **rearrange** the symbols without introducing new symbols or increasing the length of the term. Importantly, these rules are **one-way**, meaning you can't reverse a commutation to create an infinite loop.
   
   - **Annihilation Rules Reduce Length:** The `anni-AA` and `anni-BB` rules **strictly reduce** the length of the term by removing pairs of symbols. This ensures that repeated applications can only decrease the size of the term until no further reductions are possible.

2. **No Possibility of Infinite Loops:**
   - Since commutation doesn't introduce new symbols or increase term length, and annihilation strictly decreases term length, there's no mechanism to create cycles or perpetuate reductions indefinitely.
   
   - **Termination Guaranteed:** Every reduction sequence will eventually lead to a term where no more rules can be applied, i.e., a normal form.

3. **Example Illustration:**
   - Consider any term in the AB system. Applying commutation rules will organize the symbols in a specific order, making it easier for annihilation rules to apply. As annihilation rules remove symbols, the term's length decreases, guaranteeing termination.

### Conclusion

Given that every possible reduction sequence in the AB system **must terminate** after a finite number of steps (since you can't indefinitely rearrange symbols or avoid annihilation), the system is indeed **strongly normalizing**.

**Answer:**  
Yes, every reduction sequence in the AB system eventually terminates. Thus, the system is strongly normalizing.

#Q2: In a normalized term starting with `#A B#`, which symbols can occur afterwards?

To determine which symbols can **succede** a normalized term starting with `#A B#` in the **AB system**, we'll analyze the system's reduction rules and apply them to maintain a term in **normal form**.

### Recap of the AB System

1. **AB Symbols:**
   - `A#`
   - `#A`
   - `B#`
   - `#B`

2. **Reduction Rules:**
   - **Commutation Rules:**
     - `comm-AB`: `A# #B → #B A#`
     - `comm-BA`: `B# #A → #A B#`
   - **Annihilation Rules:**
     - `anni-AA`: `A# #A → ε`
     - `anni-BB`: `B# #B → ε`

3. **Normal Form:**  
   A term is in normal form if **no further reductions** can be applied.

### Analyzing the Term Starting with `#A B#`

Given the term starts with `#A B#`, let's denote the term as:
```
#A B# ...rest...
```
Our goal is to determine which symbols can legally follow `B#` without violating the **normal form** condition.

#### Constraints for Maintaining Normal Form

1. **No Reducible Pairs:**  
   After `B#`, the next symbol must **not** form a pair that matches any of the reduction rules. Specifically:
   - **Avoid `#A` after `B#`**:
     - `B# #A` matches the `comm-BA` rule (`B# #A → #A B#`), making the term reducible.
   
   - **Avoid `#B` after `B#`**:
     - `B# #B` matches the `anni-BB` rule (`B# #B → ε`), making the term reducible.

2. **Allowed Symbols After `B#`:**
   - **`A#`:**
     - `B# A#` does **not** match any reduction rule and thus maintains normal form.
   
   - **`B#`:**
     - `B# B#` does **not** directly match any reduction rule (`anni-BB` requires `B# #B`), thus it's permissible.

#### Conclusion on Allowed Symbols

- **Immediately Following Symbols:**  
  After `B#`, **only** `A#` and `B#` can follow to ensure the term remains in normal form.

- **Subsequent Symbols:**  
  The same logic recursively applies. Every time you add a new symbol after `B#`, ensure it doesn't create a reducible pair with the preceding symbol.

### **Final Answer**

**Only A# and B# may follow after the initial “#A B#” in a normal form.** In other words, symbols A# or B# can occur after “#A B#” in a normalized term.

#Q3: In a normalized term starting with `A#`, which symbols can NOT occur afterwards?

To determine **which symbols cannot** occur **immediately after `A#`** in a **normalized term** within the **AB system**, let's analyze the reduction rules and their implications.

### Recap of the AB System

1. **AB Symbols:**
   - `A#`
   - `#A`
   - `B#`
   - `#B`

2. **Reduction Rules:**
   - **Commutation Rules:**
     - `comm-AB`: `A# #B → #B A#`
     - `comm-BA`: `B# #A → #A B#`
   - **Annihilation Rules:**
     - `anni-AA`: `A# #A → ε` (removes both symbols)
     - `anni-BB`: `B# #B → ε` (removes both symbols)

3. **Normal Form:**  
   A term is in normal form if **no further reductions** can be applied.

### Analyzing the Term Starting with `A#`

Given a normalized term begins with `A#`, we need to examine which symbols can **legitimately follow** without triggering any reduction rules. The focus is on the **immediate next symbol** after `A#`.

#### Possible Immediate Successors:

1. **`A#`:**
   - **Sequence:** `A# A#`
   - **Analysis:** 
     - **No Reduction Rule Applies:** This sequence does not match any of the defined reduction rules.
     - **Result:** **Allowed** in normal form.

2. **`#A`:**
   - **Sequence:** `A# #A`
   - **Analysis:** 
     - **Matches `anni-AA`:** `A# #A → ε`
     - **Reduction Applicable:** Yes, this pair can be annihilated.
     - **Result:** **Not Allowed** in normal form.

3. **`B#`:**
   - **Sequence:** `A# B#`
   - **Analysis:** 
     - **No Reduction Rule Applies:** This sequence does not match any of the defined reduction rules.
     - **Result:** **Allowed** in normal form.

4. **`#B`:**
   - **Sequence:** `A# #B`
   - **Analysis:** 
     - **Matches `comm-AB`:** `A# #B → #B A#`
     - **Reduction Applicable:** Yes, this pair can be commuted.
     - **Result:** **Not Allowed** in normal form.

#### Summary of Immediate Successors:

| **Immediate Symbol After `A#`** | **Allowed in Normal Form?** | **Reason**                                  |
|---------------------------------|------------------------------|---------------------------------------------|
| `A#`                            | Yes                          | No reduction rule applies.                 |
| `#A`                            | **No**                       | Matches `anni-AA`, allowing annihilation.  |
| `B#`                            | Yes                          | No reduction rule applies.                 |
| `#B`                            | **No**                       | Matches `comm-AB`, allowing commutation.   |

### Conclusion

In a **normalized term** that **starts with `A#`**, the **symbols that **cannot** immediately follow** are:

- **`#A`**
- **`#B`**

These symbols would trigger reduction rules (`anni-AA` and `comm-AB`, respectively), preventing the term from being in normal form.

### **Final Answer**

**In a normalized term beginning with `A#`, the symbols `#A` and `#B` cannot immediately follow.**

#Q4: This system is strongly normalizing. Would allowing only inputs with a single letter type make it non-normalizing?

No, **restricting the AB system to inputs with a single letter type does not make it non-normalizing**. In fact, the system remains **strongly normalizing** under such a restriction. Let's delve into why this is the case.

### Understanding the AB System

#### Original System Overview

1. **Symbols:**
   - `A#`
   - `#A`
   - `B#`
   - `#B`

2. **Reduction Rules:**
   - **Commutation Rules:**
     - `comm-AB`: `A# #B → #B A#`
     - `comm-BA`: `B# #A → #A B#`
   - **Annihilation Rules:**
     - `anni-AA`: `A# #A → ε` (removes both symbols)
     - `anni-BB`: `B# #B → ε` (removes both symbols)

3. **Strong Normalization:**
   - A system is **strongly normalizing** if every possible reduction sequence terminates in a finite number of steps, reaching a normal form where no further reductions are possible.

### Scenario: Single Letter Type Restriction

When we **restrict the system to a single letter type**, we consider two possible cases:

1. **Only `A`-type Symbols:**
   - **Allowed Symbols:** `A#`, `#A`
   - **Applicable Reduction Rules:**
     - **Annihilation:** `anni-AA`: `A# #A → ε`
   - **Commutation Rules:** Not applicable, as they involve `B` symbols.

2. **Only `B`-type Symbols:**
   - **Allowed Symbols:** `B#`, `#B`
   - **Applicable Reduction Rules:**
     - **Annihilation:** `anni-BB`: `B# #B → ε`
   - **Commutation Rules:** Not applicable, as they involve `A` symbols.

#### Analysis of Each Case

1. **Single `A`-type Symbols:**
   - **Reduction Behavior:** The only applicable reduction is `A# #A → ε`, which **strictly reduces** the length of the term by removing pairs of `A#` and `#A`.
   - **Termination:** Since each annihilation step reduces the term's length, the reduction process **must terminate** after a finite number of steps, eventually reaching either an empty term or a term where no `A# #A` pairs remain.

2. **Single `B`-type Symbols:**
   - **Reduction Behavior:** Similarly, the only applicable reduction is `B# #B → ε`, which **strictly reduces** the length of the term by removing pairs of `B#` and `#B`.
   - **Termination:** Each annihilation step reduces the term's length, ensuring that the reduction process **must terminate** after a finite number of steps, eventually reaching either an empty term or a term where no `B# #B` pairs remain.

### Comparison with the Original System

In the original multi-type AB system:

- **Commutation Rules:** These can rearrange symbols but **do not increase** the term length.
- **Annihilation Rules:** These **strictly decrease** the term length.
- **Strong Normalization:** The combination ensures that every reduction sequence terminates.

When **restricted to a single letter type**, the system retains the **annihilation rules**, which continue to **strictly decrease** the term length. The absence of commutation rules in single-type inputs simplifies the system further, as there are no rearrangements that could potentially complicate the reduction process.

### Conclusion

**Restricting the AB system to inputs with only one letter type (`A` or `B`) does not introduce any mechanisms that could lead to infinite reduction sequences.** Instead, it maintains or even simplifies the strong normalization property because:

- **Reduction Steps Remain Finite:** Annihilation rules continue to reduce the term length without introducing new complexity.
- **No Infinite Loops:** Without commutation rules applicable, there's no way to cycle indefinitely.

**Final Answer:**

No. Even when restricted to single letter types, every reduction sequence still terminates. Thus, the system remains strongly normalizing.

#Q5: This system is strongly normalizing. Would introducing the `swap-AB` rule: `#A B# => B# #A` make it non-normalizing?

Introducing the `swap-AB` rule to the AB system fundamentally alters its behavior concerning **strong normalization**. Specifically, adding the rule:

- **`swap-AB`:** `#A B# => B# #A`

**_will make the system non-strongly normalizing._** Below is a detailed explanation supporting this conclusion.

---

### ### Recap of the Original AB System

1. **AB Symbols:**
   - `A#`
   - `#A`
   - `B#`
   - `#B`

2. **Reduction Rules:**
   - **Commutation Rules:**
     - `comm-AB`: `A# #B → #B A#`
     - `comm-BA`: `B# #A → #A B#`
   - **Annihilation Rules:**
     - `anni-AA`: `A# #A → ε` (removes both symbols)
     - `anni-BB`: `B# #B → ε` (removes both symbols)

3. **Strong Normalization:**
   - **Property:** Every possible reduction sequence terminates after a finite number of steps, reaching a normal form with no further reductions possible.

---

### ### Introduction of `swap-AB` Rule

- **New Rule:**
  - **`swap-AB`:** `#A B# → B# #A`

By adding `swap-AB`, we allow the system to **swap `#A` and `B#` directly**. This seemingly benign addition introduces new dynamics that can disrupt the strong normalization property.

---

### ### Impact on Strong Normalization

**1. Potential for Infinite Reduction Sequences:**

The key to strong normalization is ensuring that **no infinite chains of reductions** exist. However, the `swap-AB` rule introduces the possibility of **endless cycling** between specific symbol arrangements.

**2. Constructing an Infinite Reduction Loop:**

Consider the following term:

```
#A B# #A B# #A B# ...
```

**Step-by-Step Reduction Sequence:**

1. **Initial Term:**
   ```
   #A B# #A B# #A B# ...
   ```

2. **Apply `swap-AB` to the first `#A B#`:**
   ```
   B# #A #A B# #A B# ...
   ```

3. **Apply `swap-AB` to the second `#A B#`:**
   ```
   B# #A B# #A #A B# ...
   ```

4. **Apply `swap-AB` to the third `#A B#`:**
   ```
   B# #A B# #A B# #A ...
   ```

5. **Repeat Indefinitely:**
   - The term cycles between variations like:
     - `B# #A B# #A B# #A ...`
     - `B# #A B# #A B# #A ...`
   - Each application of `swap-AB` merely **rearranges** the symbols without ever reducing the term's length.

**Result:** The system enters an **endless loop** where it repeatedly swaps `#A` and `B#`, preventing the term from ever reaching a normal form.

**3. No Progress Towards Normal Form:**

Unlike annihilation rules (`anni-AA` and `anni-BB`) that **strictly reduce** the term's length, the `swap-AB` rule **does not contribute** to reducing the term. Instead, it facilitates **perpetual rearrangement**, which can bypass annihilation opportunities or negate progress made by other rules.

---

### ### Implications

- **Loss of Termination Guarantee:**
  - The introduction of `swap-AB` disrupts the system's ability to guarantee that all reduction sequences terminate.
  
- **Introduction of Cyclic Reductions:**
  - As demonstrated, `swap-AB` creates scenarios where reductions can cycle indefinitely, violating strong normalization.

- **System Becomes Non-Strongly Normalizing:**
  - With the possibility of infinite reduction chains, the system no longer ensures that every term reaches a normal form in finite steps.

---

### ### Conclusion

**_Adding the `swap-AB` rule (`#A B# → B# #A`) to the AB system introduces the potential for infinite reduction sequences, thereby making the system non-strongly normalizing._**

This change allows terms to be endlessly rearranged without progressing towards a normal form, violating the essential property of strong normalization.

---

**Final Answer:**

Yes. Adding the `swap-AB` rule allows certain terms to be reduced indefinitely, preventing all reduction sequences from terminating. Therefore, introducing `swap-AB` makes the system non-strongly normalizing.

#Q6: This system is strongly normalizing. Would modifying the `anni-B` rule to `B# #B => #B A# A#` make it non-normalizing?

Introducing modifications to a strongly normalizing system can have profound implications on its behavior. Let's carefully analyze **Q6** to determine the impact of altering the `anni-BB` rule.

---

### **Q6: This system is strongly normalizing. Would modifying the `anni-BB` rule to `B# #B => #B A# A#` make it non-normalizing?**

**Answer:**  
**No, modifying the `anni-BB` rule in this manner does not make the system non-normalizing. The AB system remains strongly normalizing even with the altered rule.**

---

### **Detailed Explanation**

#### **1. Understanding the Original AB System**

**Symbols:**
- `A#`
- `#A`
- `B#`
- `#B`

**Reduction Rules:**
- **Commutation Rules:**
  - `comm-AB`: `A# #B → #B A#`
  - `comm-BA`: `B# #A → #A B#`
- **Annihilation Rules:**
  - `anni-AA`: `A# #A → ε`
  - `anni-BB`: `B# #B → ε`

**Strong Normalization:**
- A system is **strongly normalizing** if every possible reduction sequence terminates after a finite number of steps, reaching a normal form where no further reductions are possible.

#### **2. The Modification Introduced**

**Modified Rule:**
- **`anni-BB`:** Instead of `B# #B → ε`, we have `B# #B → #B A# A#`.

This means that whenever `B# #B` is encountered, it is replaced with `#B A# A#` instead of being annihilated.

#### **3. Analyzing the Impact of the Modification**

**a. Potential for Infinite Reduction Sequences**

To determine if the system remains strongly normalizing, we need to check whether the modification introduces the possibility of **infinite reduction sequences**.

**b. Step-by-Step Reduction Analysis**

Let's explore how the modified rule behaves within the system:

1. **Starting with `B# #B`:**
   ```
   B# #B
   ```
   Apply `anni-BB`:
   ```
   B# #B → #B A# A#
   ```
   Resulting term:
   ```
   #B A# A#
   ```

2. **Analyzing `#B A# A#`:**
   - Possible adjacent pairs:
     - `#B` followed by `A#`: No reduction rule applies.
     - `A#` followed by `A#`: No reduction rule applies.
   - **Conclusion:** No further reductions can be applied. This term is in **normal form**.

3. **Exploring Longer Terms:**
   Consider a term with multiple `B# #B` pairs:
   ```
   B# #B B# #B
   ```
   Apply `anni-BB` to each pair:
   ```
   B# #B → #B A# A#  
   B# #B → #B A# A#  
   ```
   Resulting term:
   ```
   #B A# A# #B A# A#
   ```
   - **Analyzing for Further Reductions:**
     - `#B A#`: No reduction.
     - `A# A#`: No reduction.
     - `#B A#`: No reduction.
     - `A# A#`: No reduction.
   - **Conclusion:** The term is in normal form.

**c. Ensuring No Infinite Loops**

- **Annihilation vs. Creation:** The original `anni-BB` rule decreased the term length by removing symbols. The modified rule increases the term length by introducing more symbols. However, this increase does **not** facilitate further reductions that lead back to the original or create new opportunities for indefinite growth.
  
- **Reduction Progress:** Each application of `anni-BB` transforms `B# #B` into `#B A# A#`, which cannot be further reduced or lead to more `B# #B` pairs. There’s no recursive or cyclical pattern introduced that would allow endless reductions.

#### **4. Formal Proof Sketch**

To assert that the modified system remains strongly normalizing, consider the following:

- **Reduction Direction:** All reduction rules either maintain or increase the number of symbols without creating cycles that revisit previous configurations.
  
- **Termination Guarantee:** Since the modified `anni-BB` rule does not allow for creating patterns that can perpetually trigger further reductions, every finite term will reach a normal form in a finite number of steps.

- **No Growth to Infinity:** The modified rule does not enable the term to grow infinitely because each application transforms specific patterns into others without reintroducing reducible patterns.

#### **5. Conclusion**

The modification replaces a length-reducing rule (`B# #B → ε`) with one that rearranges and slightly increases the number of symbols (`B# #B → #B A# A#`). Despite this change, the system remains **strongly normalizing** because:

- **No Infinite Reduction Chains:** There are no mechanisms introduced that allow for infinite looping or perpetual symbol creation facilitating endless reductions.

- **Finite Termination:** Every finite term, regardless of the number of reductions applied, will eventually reach a normal form where no further reductions are possible.

**Final Answer:**

No. Even with the modified `anni-BB` rule, every reduction sequence still terminates. The system remains strongly normalizing.

#Q7: Is there any term with length 4 that normalizes to a term with length 1?

Yes, there exists a term in the AB system with length 4 that normalizes to a term of length 1. Let's delve into the specifics to understand how this arises.

### **Understanding the AB System**

#### **Symbols:**
- `A#`
- `#A`
- `B#`
- `#B`

#### **Reduction Rules:**
1. **Commutation Rules:**
   - `comm-AB`: `A# #B → #B A#`
   - `comm-BA`: `B# #A → #A B#`

2. **Annihilation Rules:**
   - `anni-AA`: `A# #A → ε` (removes both symbols)
   - `anni-BB`: `B# #B → ε` (removes both symbols)

#### **Normal Form:**
A term is in **normal form** if **no further reductions** can be applied based on the above rules.

### **Constructing the Desired Term**

To find a term of length 4 that normalizes to length 1, consider the following term:

```
A# #B A# #A
```

**Initial Term:**
```
A# #B A# #A
```

**Step-by-Step Reduction:**

1. **Apply `comm-AB` on `A# #B`:**
   - **Rule Applied:** `comm-AB`: `A# #B → #B A#`
   - **Resulting Term:**
     ```
     #B A# #A
     ```

2. **Apply `anni-AA` on `A# #A`:**
   - **Rule Applied:** `anni-AA`: `A# #A → ε`
   - **Resulting Term:**
     ```
     #B ε
     ```
   - **Simplified Term:**
     ```
     #B
     ```

**Final Normal Form:**
```
#B
```

The term `#B` is of length 1 and cannot be further reduced, as none of the reduction rules apply to it.

### **Another Example**

For additional clarity, let's examine another term:

**Term:**
```
A# #B #A B#
```

**Reduction Steps:**

1. **Apply `comm-AB` on `A# #B`:**
   - **Resulting Term:**
     ```
     #B A# #A B#
     ```

2. **Apply `anni-AA` on `A# #A`:**
   - **Resulting Term:**
     ```
     #B B#
     ```

3. **Apply `anni-BB` on `#B B#`:**
   - **Note:** `anni-BB` applies to `B# #B`, not `#B B#`. Thus, no reduction here.
   - **Final Term in Normal Form:**
     ```
     #B B#
     ```

This term normalizes to a term of length 2 (`#B B#`), illustrating that not all length 4 terms reduce to length 1. However, as demonstrated in the first example, such cases do exist.

### **Conclusion**

**Yes**, the AB system contains terms of length 4 that normalize to a term of length 1. The term `A# #B A# #A` is a clear instance where:

```
A# #B A# #A → #B A# #A → #B
```

This reduction sequence successfully transforms a 4-symbol term into a single-symbol normal form.

**Final Answer:**

Yes. For example, the term A# #B A# #A reduces stepwise to the single symbol #B.

#Q8: What is the maximum number of steps that a term with length 6 can require to reach normal form?



#Q9: In general, given a term with length 2N, what is the maximum number of steps to reach normal form?

To determine the **maximum number of reduction steps** required for a term of length **\(2N\)** to reach its **normal form** in the **AB system**, we'll perform a comprehensive analysis of the system's behavior and its reduction rules.

---

### **Recap of the AB System**

1. **Symbols:**
   - `A#`
   - `#A`
   - `B#`
   - `#B`

2. **Reduction Rules:**
   - **Commutation Rules:**
     - **`comm-AB`:** `A# #B → #B A#`
     - **`comm-BA`:** `B# #A → #A B#`
   - **Annihilation Rules:**
     - **`anni-AA`:** `A# #A → ε` (removes both symbols)
     - **`anni-BB`:** `B# #B → ε` (removes both symbols)

3. **Normal Form:**
   - A term is in **normal form** if **no further reductions** can be applied using the above rules.

4. **Strong Normalization:**
   - The AB system is **strongly normalizing**, meaning **every** reduction sequence **terminates** after a finite number of steps.

---

### **Objective**

**Determine the maximum number of reduction steps** required for any term of length **\(2N\)** in the AB system to reach its normal form.

---

### **Understanding Reduction Steps**

1. **Commutation Steps:**
   - **Purpose:** Rearrange symbols to enable annihilation.
   - **Nature:** Do **not** change the total number of symbols; merely reorder them.

2. **Annihilation Steps:**
   - **Purpose:** Remove specific adjacent symbol pairs, thereby reducing the term's length.
   - **Nature:** **Strictly decrease** the number of symbols in the term.

---

### **Analyzing the Reduction Process**

1. **Commutation Overhead:**
   - **Commutation steps** are necessary to position symbols such that annihilation rules can be applied.
   - The **number of commutation steps** depends on the initial arrangement of symbols.

2. **Annihilation Progress:**
   - Each **annihilation step** **reduces** the term's length by **2 symbols**.
   - For a term of length **\(2N\)**, a maximum of **\(N\)** annihilation steps** is required** (since each step removes 2 symbols).

3. **Interleaving Commutation and Annihilation:**
   - Between annihilation steps, a certain number of **commutation steps** may be necessary to bring reducible pairs next to each other.

---

### **Estimating the Maximum Number of Steps**

1. **Worst-Case Scenario:**
   - The **maximum number of commutation steps** occurs when each annihilation requires repositioning symbols across the entire remaining term.
   - Imagine that for each annihilation, the necessary pair is at the **opposite ends** of the term segment being considered.

2. **Step-by-Step Breakdown:**
   - **Initial Term Length:** \(2N\)
   - **First Annihilation:**
     - **Commute:** Approximately \(O(N)\) steps to bring a reducible pair together.
     - **Annihilate:** 1 step.
   - **Second Annihilation:**
     - **Commute:** Approximately \(O(N - 2)\) steps (since the term is now shorter by 2 symbols).
     - **Annihilate:** 1 step.
   - **...**
   - **Final Annihilation:**
     - **Commute:** Approximately \(O(1)\) step.
     - **Annihilate:** 1 step.

3. **Total Steps Calculation:**
   - **Commutation Steps:** Summing the series \(N + (N - 1) + (N - 2) + \dots + 1 = \frac{N(N + 1)}{2}\)
   - **Annihilation Steps:** Exactly \(N\) steps (one for each pair).

4. **Combining Both:**
   - **Total Maximum Steps:** \(\frac{N(N + 1)}{2} + N = \frac{N(N + 3)}{2}\)

   - **Asymptotic Behavior:** This simplifies to **\(O(N^2)\)**, indicating that the number of steps grows **quadratically** with \(N\).

---

### **Concrete Example**

Let's illustrate with a specific example where \(N = 3\) (term length \(6\)):

1. **Initial Term:** \(A\# \, B\# \, A\# \, #B \, #A \, B\#\)

2. **Reduction Steps:**

   - **Commute `A# #B` to `#B A#`:** \(A\# \, B\# \, A\# \, #B \, #A \, B\# → \#B \, A\# \, A\# \, #B \, #A \, B\#\)  → **1 step**

   - **Annihilate `A# #A`:** \(\#B \, A\# \, A\# \, #B \, #A \, B\# → \#B \, A\# \, \#B \, B\#\)  → **2 steps**

   - **Commute `A# #B` to `#B A#`:** \(\#B \, A\# \, \#B \, B\# → \#B \, \#B \, A\# \, B\#\)  → **3 steps**

   - **Annihilate `B# #B`:** \(\#B \, \#B \, A\# \, B\# → A\# \, B\#\)  → **4 steps**

   - **Final Annihilation:** \(\) (if possible)

   - **Total Steps:** **4 steps**

   *(Note: Actual steps may vary based on specific term arrangements, but this provides an illustrative pathway.)*

---

### **Conclusion**

- **Maximum Number of Reduction Steps for a Term of Length \(2N\):**
  
  - **Exact Formula:** \(\frac{N(N + 3)}{2}\) steps
  
  - **Asymptotic Behavior:** **Quadratic**, specifically **\(O(N^2)\)**
  
- **Implications:**
  
  - The **maximum** number of steps grows **quadratically** with the number of symbol pairs \(N\).
  
  - This is because each annihilation may require up to \(O(N)\) commutation steps, and there are \(N\) such annihilations.

---

### **Final Answer**

**For any term of length \(2N\), the maximum number of reduction steps needed to reach normal form grows proportionally to \(N²\).** Specifically, it requires up to \(\frac{N(N + 3)}{2}\) steps, making the scaling quadratic in \(N\).



RESULT:

- Q0: What's the normal form of `#A A# #B A# A# B# B# #A #B B# #A B# #B`?
- A0: #A #B A# B# B#, by reduction.
- J0: User computed the normal form as #A #B B# through step-by-step reduction, which is incorrect.
- S0: 0

- Q1: Is the AB system strongly normalizing?
- A1: Yes, because annis decrease the length, and comms can't produce infinite loops.
- J1: User correctly states the AB system is strongly normalizing, explaining that annihilations decrease length and commutations can't create infinite loops.
- S1: 1

- Q2: In a normalized term starting with `#A B#`, which symbols can occur afterwards?
- A2: A# and B#, because other symbols would trigger reductions.
- J2: User correctly states that only A# and B# can follow #A B# in a normalized term, explaining that other symbols would trigger reductions.
- S2: 1

- Q3: In a normalized term starting with `A#`, which symbols can NOT occur afterwards?
- A3: #B and #A, because they would trigger reductions.
- J3: User correctly states that #A and #B cannot follow A# in a normalized term, explaining that these symbols would trigger reductions.
- S3: 1

- Q4: This system is strongly normalizing. Would allowing only inputs with a single letter type make it non-normalizing?
- A4: No, the system would remain strongly normalizing, because it is a subset of a normalizing system.
- J4: User correctly states that restricting to single letter types would not make the system non-normalizing, explaining that it remains strongly normalizing due to finite reduction steps.
- S4: 1

- Q5: This system is strongly normalizing. Would introducing the `swap-AB` rule: `#A B# => B# #A` make it non-normalizing?
- A5: Yes, the system would become non-normalizing, since comms and swap can mutually result in infinite loops.
- J5: User correctly states that adding the swap-AB rule would make the system non-normalizing, explaining that it allows for infinite reduction sequences through endless rearrangement of symbols.
- S5: 1

- Q6: This system is strongly normalizing. Would modifying the `anni-B` rule to `B# #B => #B A# A#` make it non-normalizing?
- A6: No, the system would remain strongly normalizing, despite the rule increasing in length. That's because we'll eventually run out of B# symbols to trigger `anni-B` rules.
- J6: User correctly states that modifying the anni-BB rule to B# #B => #B A# A# would not make the system non-normalizing, explaining that it remains strongly normalizing as every reduction sequence still terminates.
- S6: 1

- Q7: Is there any term with length 4 that normalizes to a term with length 1?
- A7: No, because each step can only decrease the size by 2.
- J7: User incorrectly states that a term of length 4 can normalize to a term of length 1, providing an example of A# #B A# #A reducing to #B, which is incorrect.
- S7: 0

- Q8: What is the maximum number of steps that a term with length 6 can require to reach normal form?
- A8: In the worst cases (such as `A# A# A# #B #B #B`), 9 steps.
- J8: The user did not provide an answer to the question.
- S8: 0

- Q9: In general, given a term with length 2N, what is the maximum number of steps to reach normal form?
- A9: In the worst cases (such as `A# A# ... #B #B`), N^2 steps.
- J9: User correctly states that the maximum number of steps for a term of length 2N to reach normal form is proportional to N^2, providing a detailed analysis of commutation and annihilation steps.
- S9: 1

SCORE: 7/10
